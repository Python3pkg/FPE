#!/bin/bash

set -euo pipefail
IFS=$'\n\t'
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"
CURL_COOKIE=${HOME}/.reset_switch_curl_cookie

# Use curl to try to get the status of the reset board and process its HTML
function outlet_status {
  curl -s --cookie ${CURL_COOKIE} 192.168.0.100/index.htm | \
  tr "\n" "|" | \
  grep -o "<tr bgcolor=\"\#FFFFFF\">.*</td></tr>" | \
  sed -e 's/|//g' \
      -e 's/<\/tr>/<\/tr>\n/g' | \
  grep -v "<th>" | \
  grep -v "^$" | \
  sed -e 's/<tr bgcolor="#FFFFFF"><td align=center>//g' \
      -e 's/<\/td><td>/\t/g' \
      -e 's/<b><font color=red>//g' \
      -e 's/<b><font color=green>//g' \
      -e 's/<\/font><\/b>.*$//g' \
      -e "s/OFF/${RED}OFF${RESET}/g" \
      -e "s/ON/${GREEN}ON${RESET}/g" | \
  column -t -s $'\t'
}

function login {
  if [ -z "$(outlet_status)" ] ; then
     rm -f ${DIR}/.curl_cookie
     echo -n "Password: "
     read -s PASSWORD
     echo
     curl -s -d "Username=tess" -d "Password=${PASSWORD}" --cookie-jar ${CURL_COOKIE} 192.168.0.100/login.tgi > /dev/null
     if [ -z "$(outlet_status)" ] ; then
        echo "${RED}LOGIN FAILED âœ—${RESET}" > /dev/stderr
        exit 1
     fi
  fi
}

function turn_switch_on {
  curl -s --cookie ${CURL_COOKIE} 192.168.0.100/outlet?${1}=ON > /dev/null
}

function turn_switch_off {
  curl -s --cookie ${CURL_COOKIE} 192.168.0.100/outlet?${1}=OFF > /dev/null
}

function turn_all_switches_on {
  for i in $(seq 1 7); do
     turn_switch_on $i
  done
  outlet_status
}

function turn_all_switches_off {
  for i in $(seq 1 7); do
     turn_switch_off $i
  done
  outlet_status
}

if [[ $@ =~ "--help" ]] || [[ $@ =~ "-h" ]]; then
       cat <<EOF
usage: $0 [-h] [--off] [--on] [--reset]

Control the hardware power switch attached to the Observatory Simulator.

If no argument is given, prints the status of the switch.

optional arguments:
  -h, --help            show this help message and exit
  --off                 turn all of the hardware switches off
  --on                  turn all of the hardware switches on
  --reset               turn all of the hardware switches off and then on
EOF
       exit 0
fi

login

if [[ $# -eq 0 ]] ; then
   outlet_status
   exit 0
fi

for key in "$@" ; do
   case $key in
       --off)
       turn_all_switches_off
       shift
       ;;
       --on)
       turn_all_switches_on
       shift
       ;;
       --reset)
       turn_all_switches_off
       echo "----------------"
       turn_all_switches_on
       shift
       ;;
       *)
       ;;
   esac
done
exit 0
