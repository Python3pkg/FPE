#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
"""This script performs measurements of reference voltages to verify functionality."""

def report_table(data, expected_values={}, precision=4):
    """Make a table (string) reporting the values of the data"""
    from tessfpe.data.housekeeping_channels import housekeeping_channels
    keys = data.keys()
    units = {k: housekeeping_channels[k]["unit"] for k in keys}
    if all(isinstance(v, (list, set, tuple)) for v in data.values()):
        samples_text = "Samples: {0}\n".format(len(data.values()[0])) \
                       if len(set([len(v) for v in data.values()])) == 1 else ""
        report = pd.DataFrame(
           np.transpose(
             [[(u"{0:." + unicode(precision) + "f} {1}").format(expected_values[k], units[k]) \
               if k in expected_values else "N/A" 
               for k in keys],
              [(u"{0:." + unicode(precision) + "f} {1}").format(np.average(data[k]), units[k])
               for k in keys],
              [(u"{0:." + unicode(precision) + "f} {1}").format(np.std(data[k]), units[k])
               for k in keys],
              [u"{0} {1}Â²".format(np.var(data[k]), units[k])
               for k in keys]]),
           index=keys, 
           columns=[' Expected', ' Average', ' STD', ' Variance'])

        if list(report[' Expected'].unique()) == ['N/A']:
            del report[' Expected']
    else:
        samples_text = ""
        report = pd.DataFrame(
           np.transpose(
             [[(u"{0:." + unicode(precision) + "f} {1}").format(data[k], units[k])
               for k in keys]]),
           index=keys)

    return samples_text + \
           report.to_string(justify='left',
                            formatters={col:u'{{:<{}s}}'.format(report[col].str.len().max()).format
                                        for col in report.columns.values})

if __name__ == "__main__":
    from tessfpe.dhu.fpe import FPE
    from tessfpe.data.housekeeping_channels import housekeeping_channels
    from tessfpe.dhu.unit_tests import voltage_reference_values
    from copy import deepcopy
    import numpy as np
    import pandas as pd
    import argparse
    import sys

    # Parse the command line arguments
    parser = argparse.ArgumentParser(description='Measure the bias voltages on the housekeeping to verify they match the reference values')
    parser.add_argument('samples', metavar='N', type=int, nargs='?', default=100, help='number of samples to take')
    parser.add_argument('precision', metavar='N', type=int, nargs='?', default=4, help='number of digits of precision to use when outputting')
    args = parser.parse_args()
    
    with FPE(1) as fpe:
        keys = list(voltage_reference_values.keys())
        units = {k: housekeeping_channels[k]["unit"] for k in keys}
        reported_values = {k:[] for k in keys}

        for _ in range(args.samples):
            hk = deepcopy(fpe.house_keeping)
            for k in keys:
                reported_values[k].append(hk["analogue"][k])

        print report_table(reported_values, 
                           expected_values = voltage_reference_values,
                           precision = args.precision)
        sys.exit(0)  # 0 is SUCCESS for shell commands
