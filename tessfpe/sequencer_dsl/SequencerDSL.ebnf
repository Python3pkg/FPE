@@comments :: ?/\/\*.*?\*\//?
@@eol_comments :: ?/\/\/.*?$/?

(* Semantics for defaults: records the state resulting from 
   applying <state_changes> to the all "off" state. This 
   defines the initial state for the subsequent sequences. 
   No output. *)
defaults = "defaults" "{" default:state_changes "}" ;

(* Semantics for hold: Emit a program instruction to execute 
   the sequence identified  by symbol count times. The 
   instruction should have the HOLD bit set, and 
   DATA_TYPE of no_data. *)
hold = "hold" hold:symbol ;

(* Top level rule *)
readout = {parameter}* >defaults body:{ ( sequence | parameter ) }* >hold $ ;

(* Semantics for state_change: must be the name of a sequencer bit 
   from Section 5.2.2 of the the FPGA document. 
   Change the state accordingly. *)
state_changes = { state_change }* ;
state_change = bit_name ( "high" | "low" ) ;
bit_name = "P1-IA-1" | "P2-IA-1" | "P3-IA-1" | "P1-IA-2" | "P2-IA-2" | 
           "P3-IA-2" | "P1-IA-3" | "P2-IA-3" | "P3-IA-3" | "P1-IA-4" | 
           "P2-IA-4" | "P3-IA-4" | "P1-FS-1" | "P2-FS-1" | "P3-FS-1" | 
           "P1-FS-2" | "P2-FS-2" | "P3-FS-2" | "P1-FS-3" | "P2-FS-3" | 
           "P3-FS-3" | "P1-FS-4" | "P2-FS-4" | "P3-FS-4" | "P1-OR"   | 
           "P2-OR"   | "P3-OR"   | "RG"      | "ID"      | "Int"     | 
           "DeInt"   | "Clamp"   | "CNV"     | "P1-U"    | "P2-U"    | 
           "P3-U" ;

symbol = /[a-zA-Z][a-zA-Z0-9_]*/ ; 

(* Semantics for sequence: Add symbol to the sequencer symbol 
   table associated with the next free address in sequencer 
   memory before processing the <steps>. After processing the 
   <steps>, associate the last used address in sequencer 
   memory with the symbol also. *)
single_step = "step" ;
multi_step = "step" "(" steps:expression ")" ;
steps = {(single_step | multi_step)}+ ;
signal = state_changes steps ;
signals = {signal}+ ;
subsequence = symbol ;
sequence_body = {(signals | subsequence)}+ ;
sequence = "sequence" name:symbol "{" value:sequence_body "}" ;

(* Set the value of a symbol in the parameter namespace. *)
parameter = "parameter" name:symbol "=" value:expression ;
expression = add | subtract | multiply | divide | value ;
add = value "+" value ;
subtract = value "-" value ;
multiply = value "*" value ;
divide = value "/" value ;
value = value:predefined_symbol | value:constant | "(" value:expression ")" ;
predefined_symbol = symbol ;
constant = /[0-9]+/ ;
